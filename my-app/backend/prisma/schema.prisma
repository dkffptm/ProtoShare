generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     String @default("USER")

  projectsOwned        Project[]            @relation("OwnerProjects")
  memberships          ProjectMember[]      @relation("UserMemberships")
  assignedTasks        Task[]               @relation("TaskAssignee")
  notificationSettings NotificationSetting?
  notifications        Notification[]       @relation("NotificationToUser")

  comments Comment[] @relation("CommentAuthor")
}

model Project {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  userId Int
  user   User @relation("OwnerProjects", fields: [userId], references: [id], onDelete: Cascade)

  members ProjectMember[]
  tasks   Task[]
  logs    Log[]

  invitedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectMember {
  id        Int    @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String @default("USER")

  user    User    @relation("UserMemberships", fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  @@unique([projectId, userId])
}

model Task {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  code        String
  title       String
  description String?
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  assigneeId Int?
  assignee   User? @relation("TaskAssignee", fields: [assigneeId], references: [id])

  comments Comment[]
}

model Comment {
  id     Int  @id @default(autoincrement())
  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation("CommentAuthor", fields: [userId], references: [id], onDelete: Cascade)

  content   String
  createdAt DateTime @default(now())
}


model Log {
  id         Int      @id @default(autoincrement())
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  action     String
  entityType String
  entityId   Int
  loggedAt   DateTime @default(now())
}

model NotificationSetting {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  receiveEmail       Boolean @default(true)
  receiveInApp       Boolean @default(true)
  dueDateReminderDay Int     @default(1)
}

model Notification {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation("NotificationToUser", fields: [userId], references: [id], onDelete: Cascade)

  type      String
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
